import re
from datetime import datetime, date, timedelta

def NormalizeURL(url):

	return url

def MetadataObjectForURL(url):
	content = HTML.ElementFromURL(url, errors='ignore', cacheTime=1800)

        meta_title = content.xpath("//head//meta[@property='og:title']")
        if len(meta_title) > 0:
                title = meta_title[0].get('content')
        else:
                title = 'London Live'

        description = content.xpath("//head//meta[@name='description']")[0].get('content')

        meta_image = content.xpath("//head//meta[@property='og:image']")
        if len(meta_image) > 0:
                thumb = meta_image[0].get('content')
        else:
                thumb = ''
	

        broadcast_date_div = content.xpath("//div[@class='media-marquee-text__broadcast-date']")
        if len(broadcast_date_div) > 0:
                broadcast_date_str = broadcast_date_div[0].text
                broadcast_date = datetime.strptime(broadcast_date_str, "Broadcast %I:%M%p, %a %d %b")
                broadcast_date = broadcast_date.replace(year = datetime.today().year)
                if broadcast_date > (datetime.today() + timedelta(days = 15)):
                        broadcast_date = broadcast_date.replace(year = broadcast_date.year-1)
        else:
                broadcast_date = date.today()

        return VideoClipObject(
			title = title,
			summary = description,
			thumb = thumb,
                        originally_available_at = broadcast_date
		)

def MediaObjectsForURL(url):

	ret = []
	ret.append(
		MediaObject(
                        optimized_for_streaming = True,
                        parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))]
		)
	)
	
  	return ret

def PlayVideo(url):
        content = HTML.ElementFromURL(url, errors='ignore', cacheTime=1800)
        video_url = content.xpath('//video/source/@src')[0]
        Log.Debug('video URL:%s'%video_url)
        return Redirect(url=video_url)

